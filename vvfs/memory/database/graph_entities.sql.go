// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: graph_entities.sql

package database

import (
	"context"
	"database/sql"
)

const countGraphEntities = `-- name: CountGraphEntities :one
SELECT COUNT(*) FROM graph_entities
`

func (q *Queries) CountGraphEntities(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countGraphEntitiesStmt, countGraphEntities)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countGraphEntitiesByKind = `-- name: CountGraphEntitiesByKind :one
SELECT COUNT(*) FROM graph_entities WHERE kind = ?
`

func (q *Queries) CountGraphEntitiesByKind(ctx context.Context, kind string) (int64, error) {
	row := q.queryRow(ctx, q.countGraphEntitiesByKindStmt, countGraphEntitiesByKind, kind)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createGraphEntity = `-- name: CreateGraphEntity :one
INSERT INTO graph_entities (id, kind, name, summary, attrs_json, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
ON CONFLICT (id) DO UPDATE SET
    kind = EXCLUDED.kind,
    name = EXCLUDED.name,
    summary = EXCLUDED.summary,
    attrs_json = EXCLUDED.attrs_json,
    updated_at = CURRENT_TIMESTAMP
RETURNING id, kind, name, summary, attrs_json, created_at, updated_at
`

type CreateGraphEntityParams struct {
	ID        string `json:"id"`
	Kind      string `json:"kind"`
	Name      string `json:"name"`
	Summary   string `json:"summary"`
	AttrsJson string `json:"attrs_json"`
}

func (q *Queries) CreateGraphEntity(ctx context.Context, arg CreateGraphEntityParams) (GraphEntity, error) {
	row := q.queryRow(ctx, q.createGraphEntityStmt, createGraphEntity,
		arg.ID,
		arg.Kind,
		arg.Name,
		arg.Summary,
		arg.AttrsJson,
	)
	var i GraphEntity
	err := row.Scan(
		&i.ID,
		&i.Kind,
		&i.Name,
		&i.Summary,
		&i.AttrsJson,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGraphEntity = `-- name: DeleteGraphEntity :exec
DELETE FROM graph_entities WHERE id = ?
`

func (q *Queries) DeleteGraphEntity(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteGraphEntityStmt, deleteGraphEntity, id)
	return err
}

const getGraphEntitiesByKind = `-- name: GetGraphEntitiesByKind :many
SELECT id, kind, name, summary, attrs_json, created_at, updated_at
FROM graph_entities
WHERE kind = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type GetGraphEntitiesByKindParams struct {
	Kind   string `json:"kind"`
	Limit  int64  `json:"limit"`
	Offset int64  `json:"offset"`
}

func (q *Queries) GetGraphEntitiesByKind(ctx context.Context, arg GetGraphEntitiesByKindParams) ([]GraphEntity, error) {
	rows, err := q.query(ctx, q.getGraphEntitiesByKindStmt, getGraphEntitiesByKind, arg.Kind, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GraphEntity{}
	for rows.Next() {
		var i GraphEntity
		if err := rows.Scan(
			&i.ID,
			&i.Kind,
			&i.Name,
			&i.Summary,
			&i.AttrsJson,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGraphEntitiesWithSummary = `-- name: GetGraphEntitiesWithSummary :many
SELECT id, kind, name, summary, attrs_json, created_at, updated_at
FROM graph_entities
WHERE summary IS NOT NULL AND summary != ''
ORDER BY updated_at DESC
LIMIT ? OFFSET ?
`

type GetGraphEntitiesWithSummaryParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) GetGraphEntitiesWithSummary(ctx context.Context, arg GetGraphEntitiesWithSummaryParams) ([]GraphEntity, error) {
	rows, err := q.query(ctx, q.getGraphEntitiesWithSummaryStmt, getGraphEntitiesWithSummary, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GraphEntity{}
	for rows.Next() {
		var i GraphEntity
		if err := rows.Scan(
			&i.ID,
			&i.Kind,
			&i.Name,
			&i.Summary,
			&i.AttrsJson,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGraphEntity = `-- name: GetGraphEntity :one

SELECT id, kind, name, summary, attrs_json, created_at, updated_at
FROM graph_entities
WHERE id = ?
`

// SQLC queries for graph_entities table
// These queries will be generated into Go code for type-safe database operations
func (q *Queries) GetGraphEntity(ctx context.Context, id string) (GraphEntity, error) {
	row := q.queryRow(ctx, q.getGraphEntityStmt, getGraphEntity, id)
	var i GraphEntity
	err := row.Scan(
		&i.ID,
		&i.Kind,
		&i.Name,
		&i.Summary,
		&i.AttrsJson,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGraphEntityAttrs = `-- name: GetGraphEntityAttrs :one
SELECT attrs_json FROM graph_entities WHERE id = ?
`

func (q *Queries) GetGraphEntityAttrs(ctx context.Context, id string) (string, error) {
	row := q.queryRow(ctx, q.getGraphEntityAttrsStmt, getGraphEntityAttrs, id)
	var attrs_json string
	err := row.Scan(&attrs_json)
	return attrs_json, err
}

const listGraphEntities = `-- name: ListGraphEntities :many
SELECT id, kind, name, summary, attrs_json, created_at, updated_at
FROM graph_entities
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListGraphEntitiesParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListGraphEntities(ctx context.Context, arg ListGraphEntitiesParams) ([]GraphEntity, error) {
	rows, err := q.query(ctx, q.listGraphEntitiesStmt, listGraphEntities, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GraphEntity{}
	for rows.Next() {
		var i GraphEntity
		if err := rows.Scan(
			&i.ID,
			&i.Kind,
			&i.Name,
			&i.Summary,
			&i.AttrsJson,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchGraphEntitiesFTS = `-- name: SearchGraphEntitiesFTS :many
SELECT e.id, e.kind, e.name, e.summary, e.attrs_json, e.created_at, e.updated_at,
       '' as highlighted_name,
       '' as highlighted_summary,
       0.0 as bm25_score
FROM graph_entities e
WHERE e.name LIKE '%' || ? || '%' OR e.summary LIKE '%' || ? || '%'
ORDER BY e.created_at DESC
LIMIT ? OFFSET ?
`

type SearchGraphEntitiesFTSParams struct {
	Column1 sql.NullString `json:"column_1"`
	Column2 sql.NullString `json:"column_2"`
	Limit   int64          `json:"limit"`
	Offset  int64          `json:"offset"`
}

type SearchGraphEntitiesFTSRow struct {
	ID                 string       `json:"id"`
	Kind               string       `json:"kind"`
	Name               string       `json:"name"`
	Summary            string       `json:"summary"`
	AttrsJson          string       `json:"attrs_json"`
	CreatedAt          sql.NullTime `json:"created_at"`
	UpdatedAt          sql.NullTime `json:"updated_at"`
	HighlightedName    string       `json:"highlighted_name"`
	HighlightedSummary string       `json:"highlighted_summary"`
	Bm25Score          int64        `json:"bm25_score"`
}

func (q *Queries) SearchGraphEntitiesFTS(ctx context.Context, arg SearchGraphEntitiesFTSParams) ([]SearchGraphEntitiesFTSRow, error) {
	rows, err := q.query(ctx, q.searchGraphEntitiesFTSStmt, searchGraphEntitiesFTS,
		arg.Column1,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchGraphEntitiesFTSRow{}
	for rows.Next() {
		var i SearchGraphEntitiesFTSRow
		if err := rows.Scan(
			&i.ID,
			&i.Kind,
			&i.Name,
			&i.Summary,
			&i.AttrsJson,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.HighlightedName,
			&i.HighlightedSummary,
			&i.Bm25Score,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGraphEntity = `-- name: UpdateGraphEntity :one
UPDATE graph_entities
SET kind = ?, name = ?, summary = ?, attrs_json = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, kind, name, summary, attrs_json, created_at, updated_at
`

type UpdateGraphEntityParams struct {
	Kind      string `json:"kind"`
	Name      string `json:"name"`
	Summary   string `json:"summary"`
	AttrsJson string `json:"attrs_json"`
	ID        string `json:"id"`
}

func (q *Queries) UpdateGraphEntity(ctx context.Context, arg UpdateGraphEntityParams) (GraphEntity, error) {
	row := q.queryRow(ctx, q.updateGraphEntityStmt, updateGraphEntity,
		arg.Kind,
		arg.Name,
		arg.Summary,
		arg.AttrsJson,
		arg.ID,
	)
	var i GraphEntity
	err := row.Scan(
		&i.ID,
		&i.Kind,
		&i.Name,
		&i.Summary,
		&i.AttrsJson,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateGraphEntityAttrs = `-- name: UpdateGraphEntityAttrs :exec
UPDATE graph_entities
SET attrs_json = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateGraphEntityAttrsParams struct {
	AttrsJson string `json:"attrs_json"`
	ID        string `json:"id"`
}

func (q *Queries) UpdateGraphEntityAttrs(ctx context.Context, arg UpdateGraphEntityAttrsParams) error {
	_, err := q.exec(ctx, q.updateGraphEntityAttrsStmt, updateGraphEntityAttrs, arg.AttrsJson, arg.ID)
	return err
}
