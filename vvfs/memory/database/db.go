// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.batchCreateEntityFileRelationsStmt, err = db.PrepareContext(ctx, batchCreateEntityFileRelations); err != nil {
		return nil, fmt.Errorf("error preparing query BatchCreateEntityFileRelations: %w", err)
	}
	if q.batchCreateFilesStmt, err = db.PrepareContext(ctx, batchCreateFiles); err != nil {
		return nil, fmt.Errorf("error preparing query BatchCreateFiles: %w", err)
	}
	if q.batchCreateObservationsStmt, err = db.PrepareContext(ctx, batchCreateObservations); err != nil {
		return nil, fmt.Errorf("error preparing query BatchCreateObservations: %w", err)
	}
	if q.batchCreateOperationsStmt, err = db.PrepareContext(ctx, batchCreateOperations); err != nil {
		return nil, fmt.Errorf("error preparing query BatchCreateOperations: %w", err)
	}
	if q.batchCreateWorkspacesStmt, err = db.PrepareContext(ctx, batchCreateWorkspaces); err != nil {
		return nil, fmt.Errorf("error preparing query BatchCreateWorkspaces: %w", err)
	}
	if q.batchDeleteFilesStmt, err = db.PrepareContext(ctx, batchDeleteFiles); err != nil {
		return nil, fmt.Errorf("error preparing query BatchDeleteFiles: %w", err)
	}
	if q.batchDeleteObservationsStmt, err = db.PrepareContext(ctx, batchDeleteObservations); err != nil {
		return nil, fmt.Errorf("error preparing query BatchDeleteObservations: %w", err)
	}
	if q.batchUpdateFilesStmt, err = db.PrepareContext(ctx, batchUpdateFiles); err != nil {
		return nil, fmt.Errorf("error preparing query BatchUpdateFiles: %w", err)
	}
	if q.batchUpdateObservationsStmt, err = db.PrepareContext(ctx, batchUpdateObservations); err != nil {
		return nil, fmt.Errorf("error preparing query BatchUpdateObservations: %w", err)
	}
	if q.batchUpdateRelationConfidenceStmt, err = db.PrepareContext(ctx, batchUpdateRelationConfidence); err != nil {
		return nil, fmt.Errorf("error preparing query BatchUpdateRelationConfidence: %w", err)
	}
	if q.batchUpdateWorkspaceConfigsStmt, err = db.PrepareContext(ctx, batchUpdateWorkspaceConfigs); err != nil {
		return nil, fmt.Errorf("error preparing query BatchUpdateWorkspaceConfigs: %w", err)
	}
	if q.bulkUpdateFileEmbeddingsStmt, err = db.PrepareContext(ctx, bulkUpdateFileEmbeddings); err != nil {
		return nil, fmt.Errorf("error preparing query BulkUpdateFileEmbeddings: %w", err)
	}
	if q.cleanupLowConfidenceRelationsStmt, err = db.PrepareContext(ctx, cleanupLowConfidenceRelations); err != nil {
		return nil, fmt.Errorf("error preparing query CleanupLowConfidenceRelations: %w", err)
	}
	if q.cleanupOldOperationsStmt, err = db.PrepareContext(ctx, cleanupOldOperations); err != nil {
		return nil, fmt.Errorf("error preparing query CleanupOldOperations: %w", err)
	}
	if q.countGraphEntitiesStmt, err = db.PrepareContext(ctx, countGraphEntities); err != nil {
		return nil, fmt.Errorf("error preparing query CountGraphEntities: %w", err)
	}
	if q.countGraphEntitiesByKindStmt, err = db.PrepareContext(ctx, countGraphEntitiesByKind); err != nil {
		return nil, fmt.Errorf("error preparing query CountGraphEntitiesByKind: %w", err)
	}
	if q.countGraphGraphEdgesStmt, err = db.PrepareContext(ctx, countGraphGraphEdges); err != nil {
		return nil, fmt.Errorf("error preparing query CountGraphGraphEdges: %w", err)
	}
	if q.countGraphGraphEdgesByRelationStmt, err = db.PrepareContext(ctx, countGraphGraphEdgesByRelation); err != nil {
		return nil, fmt.Errorf("error preparing query CountGraphGraphEdgesByRelation: %w", err)
	}
	if q.countGraphGraphEdgesBySourceStmt, err = db.PrepareContext(ctx, countGraphGraphEdgesBySource); err != nil {
		return nil, fmt.Errorf("error preparing query CountGraphGraphEdgesBySource: %w", err)
	}
	if q.countGraphGraphEdgesByTargetStmt, err = db.PrepareContext(ctx, countGraphGraphEdgesByTarget); err != nil {
		return nil, fmt.Errorf("error preparing query CountGraphGraphEdgesByTarget: %w", err)
	}
	if q.createEntityFileRelationStmt, err = db.PrepareContext(ctx, createEntityFileRelation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEntityFileRelation: %w", err)
	}
	if q.createFileStmt, err = db.PrepareContext(ctx, createFile); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFile: %w", err)
	}
	if q.createGraphEntityStmt, err = db.PrepareContext(ctx, createGraphEntity); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGraphEntity: %w", err)
	}
	if q.createGraphGraphEdgeStmt, err = db.PrepareContext(ctx, createGraphGraphEdge); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGraphGraphEdge: %w", err)
	}
	if q.createObservationStmt, err = db.PrepareContext(ctx, createObservation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateObservation: %w", err)
	}
	if q.createOperationStmt, err = db.PrepareContext(ctx, createOperation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOperation: %w", err)
	}
	if q.createSnapshotStmt, err = db.PrepareContext(ctx, createSnapshot); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSnapshot: %w", err)
	}
	if q.createWorkspaceStmt, err = db.PrepareContext(ctx, createWorkspace); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWorkspace: %w", err)
	}
	if q.deleteEntityFileRelationStmt, err = db.PrepareContext(ctx, deleteEntityFileRelation); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEntityFileRelation: %w", err)
	}
	if q.deleteEntityObservationsStmt, err = db.PrepareContext(ctx, deleteEntityObservations); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEntityObservations: %w", err)
	}
	if q.deleteFileStmt, err = db.PrepareContext(ctx, deleteFile); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFile: %w", err)
	}
	if q.deleteGraphEdgeStmt, err = db.PrepareContext(ctx, deleteGraphEdge); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGraphEdge: %w", err)
	}
	if q.deleteGraphEntityStmt, err = db.PrepareContext(ctx, deleteGraphEntity); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGraphEntity: %w", err)
	}
	if q.deleteObservationStmt, err = db.PrepareContext(ctx, deleteObservation); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteObservation: %w", err)
	}
	if q.deleteSnapshotStmt, err = db.PrepareContext(ctx, deleteSnapshot); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSnapshot: %w", err)
	}
	if q.deleteWorkspaceStmt, err = db.PrepareContext(ctx, deleteWorkspace); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWorkspace: %w", err)
	}
	if q.getCurrentGraphGraphEdgesStmt, err = db.PrepareContext(ctx, getCurrentGraphGraphEdges); err != nil {
		return nil, fmt.Errorf("error preparing query GetCurrentGraphGraphEdges: %w", err)
	}
	if q.getEntitiesByMetadataStmt, err = db.PrepareContext(ctx, getEntitiesByMetadata); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntitiesByMetadata: %w", err)
	}
	if q.getEntitiesByObservationCountStmt, err = db.PrepareContext(ctx, getEntitiesByObservationCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntitiesByObservationCount: %w", err)
	}
	if q.getEntitiesWithEmbeddingsStmt, err = db.PrepareContext(ctx, getEntitiesWithEmbeddings); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntitiesWithEmbeddings: %w", err)
	}
	if q.getEntityFileNetworkStmt, err = db.PrepareContext(ctx, getEntityFileNetwork); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntityFileNetwork: %w", err)
	}
	if q.getEntityFileRelationStmt, err = db.PrepareContext(ctx, getEntityFileRelation); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntityFileRelation: %w", err)
	}
	if q.getEntityNeighborsStmt, err = db.PrepareContext(ctx, getEntityNeighbors); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntityNeighbors: %w", err)
	}
	if q.getEntityObservationStatsStmt, err = db.PrepareContext(ctx, getEntityObservationStats); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntityObservationStats: %w", err)
	}
	if q.getEntityObservationsStmt, err = db.PrepareContext(ctx, getEntityObservations); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntityObservations: %w", err)
	}
	if q.getEntityRelationsStmt, err = db.PrepareContext(ctx, getEntityRelations); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntityRelations: %w", err)
	}
	if q.getFileStmt, err = db.PrepareContext(ctx, getFile); err != nil {
		return nil, fmt.Errorf("error preparing query GetFile: %w", err)
	}
	if q.getFileByPathStmt, err = db.PrepareContext(ctx, getFileByPath); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileByPath: %w", err)
	}
	if q.getFileRelationsStmt, err = db.PrepareContext(ctx, getFileRelations); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileRelations: %w", err)
	}
	if q.getFileStatsByWorkspaceStmt, err = db.PrepareContext(ctx, getFileStatsByWorkspace); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileStatsByWorkspace: %w", err)
	}
	if q.getFilesBySizeRangeStmt, err = db.PrepareContext(ctx, getFilesBySizeRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetFilesBySizeRange: %w", err)
	}
	if q.getFilesForEntityTypeStmt, err = db.PrepareContext(ctx, getFilesForEntityType); err != nil {
		return nil, fmt.Errorf("error preparing query GetFilesForEntityType: %w", err)
	}
	if q.getFilesWithEmbeddingsStmt, err = db.PrepareContext(ctx, getFilesWithEmbeddings); err != nil {
		return nil, fmt.Errorf("error preparing query GetFilesWithEmbeddings: %w", err)
	}
	if q.getFilesWithoutEmbeddingsStmt, err = db.PrepareContext(ctx, getFilesWithoutEmbeddings); err != nil {
		return nil, fmt.Errorf("error preparing query GetFilesWithoutEmbeddings: %w", err)
	}
	if q.getGraphEdgeAttrsStmt, err = db.PrepareContext(ctx, getGraphEdgeAttrs); err != nil {
		return nil, fmt.Errorf("error preparing query GetGraphEdgeAttrs: %w", err)
	}
	if q.getGraphEdgeProvenanceStmt, err = db.PrepareContext(ctx, getGraphEdgeProvenance); err != nil {
		return nil, fmt.Errorf("error preparing query GetGraphEdgeProvenance: %w", err)
	}
	if q.getGraphEntitiesByKindStmt, err = db.PrepareContext(ctx, getGraphEntitiesByKind); err != nil {
		return nil, fmt.Errorf("error preparing query GetGraphEntitiesByKind: %w", err)
	}
	if q.getGraphEntitiesWithSummaryStmt, err = db.PrepareContext(ctx, getGraphEntitiesWithSummary); err != nil {
		return nil, fmt.Errorf("error preparing query GetGraphEntitiesWithSummary: %w", err)
	}
	if q.getGraphEntityStmt, err = db.PrepareContext(ctx, getGraphEntity); err != nil {
		return nil, fmt.Errorf("error preparing query GetGraphEntity: %w", err)
	}
	if q.getGraphEntityAttrsStmt, err = db.PrepareContext(ctx, getGraphEntityAttrs); err != nil {
		return nil, fmt.Errorf("error preparing query GetGraphEntityAttrs: %w", err)
	}
	if q.getGraphGraphEdgeStmt, err = db.PrepareContext(ctx, getGraphGraphEdge); err != nil {
		return nil, fmt.Errorf("error preparing query GetGraphGraphEdge: %w", err)
	}
	if q.getGraphGraphEdgesAsOfStmt, err = db.PrepareContext(ctx, getGraphGraphEdgesAsOf); err != nil {
		return nil, fmt.Errorf("error preparing query GetGraphGraphEdgesAsOf: %w", err)
	}
	if q.getGraphGraphEdgesBetweenEntitiesStmt, err = db.PrepareContext(ctx, getGraphGraphEdgesBetweenEntities); err != nil {
		return nil, fmt.Errorf("error preparing query GetGraphGraphEdgesBetweenEntities: %w", err)
	}
	if q.getGraphGraphEdgesByRelationStmt, err = db.PrepareContext(ctx, getGraphGraphEdgesByRelation); err != nil {
		return nil, fmt.Errorf("error preparing query GetGraphGraphEdgesByRelation: %w", err)
	}
	if q.getGraphGraphEdgesBySourceStmt, err = db.PrepareContext(ctx, getGraphGraphEdgesBySource); err != nil {
		return nil, fmt.Errorf("error preparing query GetGraphGraphEdgesBySource: %w", err)
	}
	if q.getGraphGraphEdgesByTargetStmt, err = db.PrepareContext(ctx, getGraphGraphEdgesByTarget); err != nil {
		return nil, fmt.Errorf("error preparing query GetGraphGraphEdgesByTarget: %w", err)
	}
	if q.getGraphGraphEdgesByTimeRangeStmt, err = db.PrepareContext(ctx, getGraphGraphEdgesByTimeRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetGraphGraphEdgesByTimeRange: %w", err)
	}
	if q.getGraphGraphEdgesWithValidityStmt, err = db.PrepareContext(ctx, getGraphGraphEdgesWithValidity); err != nil {
		return nil, fmt.Errorf("error preparing query GetGraphGraphEdgesWithValidity: %w", err)
	}
	if q.getHighConfidenceRelationsStmt, err = db.PrepareContext(ctx, getHighConfidenceRelations); err != nil {
		return nil, fmt.Errorf("error preparing query GetHighConfidenceRelations: %w", err)
	}
	if q.getInvalidatedGraphGraphEdgesStmt, err = db.PrepareContext(ctx, getInvalidatedGraphGraphEdges); err != nil {
		return nil, fmt.Errorf("error preparing query GetInvalidatedGraphGraphEdges: %w", err)
	}
	if q.getLatestSnapshotStmt, err = db.PrepareContext(ctx, getLatestSnapshot); err != nil {
		return nil, fmt.Errorf("error preparing query GetLatestSnapshot: %w", err)
	}
	if q.getObservationStmt, err = db.PrepareContext(ctx, getObservation); err != nil {
		return nil, fmt.Errorf("error preparing query GetObservation: %w", err)
	}
	if q.getObservationsByEntitiesStmt, err = db.PrepareContext(ctx, getObservationsByEntities); err != nil {
		return nil, fmt.Errorf("error preparing query GetObservationsByEntities: %w", err)
	}
	if q.getObservationsByTimeRangeStmt, err = db.PrepareContext(ctx, getObservationsByTimeRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetObservationsByTimeRange: %w", err)
	}
	if q.getObservationsWithEmbeddingsStmt, err = db.PrepareContext(ctx, getObservationsWithEmbeddings); err != nil {
		return nil, fmt.Errorf("error preparing query GetObservationsWithEmbeddings: %w", err)
	}
	if q.getOperationStmt, err = db.PrepareContext(ctx, getOperation); err != nil {
		return nil, fmt.Errorf("error preparing query GetOperation: %w", err)
	}
	if q.getOperationStatsStmt, err = db.PrepareContext(ctx, getOperationStats); err != nil {
		return nil, fmt.Errorf("error preparing query GetOperationStats: %w", err)
	}
	if q.getOperationSummaryStmt, err = db.PrepareContext(ctx, getOperationSummary); err != nil {
		return nil, fmt.Errorf("error preparing query GetOperationSummary: %w", err)
	}
	if q.getOperationsByTimeRangeStmt, err = db.PrepareContext(ctx, getOperationsByTimeRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetOperationsByTimeRange: %w", err)
	}
	if q.getOperationsByTypeStmt, err = db.PrepareContext(ctx, getOperationsByType); err != nil {
		return nil, fmt.Errorf("error preparing query GetOperationsByType: %w", err)
	}
	if q.getOperationsByUserStmt, err = db.PrepareContext(ctx, getOperationsByUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetOperationsByUser: %w", err)
	}
	if q.getOrphanedRelationsStmt, err = db.PrepareContext(ctx, getOrphanedRelations); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrphanedRelations: %w", err)
	}
	if q.getRecentEntitiesStmt, err = db.PrepareContext(ctx, getRecentEntities); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecentEntities: %w", err)
	}
	if q.getRecentObservationsStmt, err = db.PrepareContext(ctx, getRecentObservations); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecentObservations: %w", err)
	}
	if q.getRecentOperationsStmt, err = db.PrepareContext(ctx, getRecentOperations); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecentOperations: %w", err)
	}
	if q.getRecentlyModifiedFilesStmt, err = db.PrepareContext(ctx, getRecentlyModifiedFiles); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecentlyModifiedFiles: %w", err)
	}
	if q.getRelationStatisticsStmt, err = db.PrepareContext(ctx, getRelationStatistics); err != nil {
		return nil, fmt.Errorf("error preparing query GetRelationStatistics: %w", err)
	}
	if q.getRelationsByTypeStmt, err = db.PrepareContext(ctx, getRelationsByType); err != nil {
		return nil, fmt.Errorf("error preparing query GetRelationsByType: %w", err)
	}
	if q.getSimilarEntitiesForFileStmt, err = db.PrepareContext(ctx, getSimilarEntitiesForFile); err != nil {
		return nil, fmt.Errorf("error preparing query GetSimilarEntitiesForFile: %w", err)
	}
	if q.getSnapshotStmt, err = db.PrepareContext(ctx, getSnapshot); err != nil {
		return nil, fmt.Errorf("error preparing query GetSnapshot: %w", err)
	}
	if q.getTopRelatedFilesStmt, err = db.PrepareContext(ctx, getTopRelatedFiles); err != nil {
		return nil, fmt.Errorf("error preparing query GetTopRelatedFiles: %w", err)
	}
	if q.getWorkspaceStmt, err = db.PrepareContext(ctx, getWorkspace); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspace: %w", err)
	}
	if q.getWorkspaceActivityStmt, err = db.PrepareContext(ctx, getWorkspaceActivity); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceActivity: %w", err)
	}
	if q.getWorkspaceByPathStmt, err = db.PrepareContext(ctx, getWorkspaceByPath); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceByPath: %w", err)
	}
	if q.getWorkspaceFileDistributionStmt, err = db.PrepareContext(ctx, getWorkspaceFileDistribution); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceFileDistribution: %w", err)
	}
	if q.getWorkspaceOperationsStmt, err = db.PrepareContext(ctx, getWorkspaceOperations); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceOperations: %w", err)
	}
	if q.getWorkspaceSnapshotsStmt, err = db.PrepareContext(ctx, getWorkspaceSnapshots); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceSnapshots: %w", err)
	}
	if q.getWorkspaceSummaryStmt, err = db.PrepareContext(ctx, getWorkspaceSummary); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceSummary: %w", err)
	}
	if q.getWorkspaceTopFilesStmt, err = db.PrepareContext(ctx, getWorkspaceTopFiles); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceTopFiles: %w", err)
	}
	if q.getWorkspaceWithStatsStmt, err = db.PrepareContext(ctx, getWorkspaceWithStats); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceWithStats: %w", err)
	}
	if q.getWorkspacesByActivityStmt, err = db.PrepareContext(ctx, getWorkspacesByActivity); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspacesByActivity: %w", err)
	}
	if q.invalidateGraphEdgeStmt, err = db.PrepareContext(ctx, invalidateGraphEdge); err != nil {
		return nil, fmt.Errorf("error preparing query InvalidateGraphEdge: %w", err)
	}
	if q.listFilesByDirectoryStmt, err = db.PrepareContext(ctx, listFilesByDirectory); err != nil {
		return nil, fmt.Errorf("error preparing query ListFilesByDirectory: %w", err)
	}
	if q.listFilesByWorkspaceStmt, err = db.PrepareContext(ctx, listFilesByWorkspace); err != nil {
		return nil, fmt.Errorf("error preparing query ListFilesByWorkspace: %w", err)
	}
	if q.listGraphEntitiesStmt, err = db.PrepareContext(ctx, listGraphEntities); err != nil {
		return nil, fmt.Errorf("error preparing query ListGraphEntities: %w", err)
	}
	if q.listGraphGraphGraphEdgesStmt, err = db.PrepareContext(ctx, listGraphGraphGraphEdges); err != nil {
		return nil, fmt.Errorf("error preparing query ListGraphGraphGraphEdges: %w", err)
	}
	if q.listWorkspacesStmt, err = db.PrepareContext(ctx, listWorkspaces); err != nil {
		return nil, fmt.Errorf("error preparing query ListWorkspaces: %w", err)
	}
	if q.searchEntitiesByContentStmt, err = db.PrepareContext(ctx, searchEntitiesByContent); err != nil {
		return nil, fmt.Errorf("error preparing query SearchEntitiesByContent: %w", err)
	}
	if q.searchEntitiesByNameStmt, err = db.PrepareContext(ctx, searchEntitiesByName); err != nil {
		return nil, fmt.Errorf("error preparing query SearchEntitiesByName: %w", err)
	}
	if q.searchEntitiesByTypeStmt, err = db.PrepareContext(ctx, searchEntitiesByType); err != nil {
		return nil, fmt.Errorf("error preparing query SearchEntitiesByType: %w", err)
	}
	if q.searchFilesStmt, err = db.PrepareContext(ctx, searchFiles); err != nil {
		return nil, fmt.Errorf("error preparing query SearchFiles: %w", err)
	}
	if q.searchGraphEntitiesFTSStmt, err = db.PrepareContext(ctx, searchGraphEntitiesFTS); err != nil {
		return nil, fmt.Errorf("error preparing query SearchGraphEntitiesFTS: %w", err)
	}
	if q.searchObservationsStmt, err = db.PrepareContext(ctx, searchObservations); err != nil {
		return nil, fmt.Errorf("error preparing query SearchObservations: %w", err)
	}
	if q.searchWorkspacesStmt, err = db.PrepareContext(ctx, searchWorkspaces); err != nil {
		return nil, fmt.Errorf("error preparing query SearchWorkspaces: %w", err)
	}
	if q.updateEntityFileRelationStmt, err = db.PrepareContext(ctx, updateEntityFileRelation); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEntityFileRelation: %w", err)
	}
	if q.updateFileStmt, err = db.PrepareContext(ctx, updateFile); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFile: %w", err)
	}
	if q.updateGraphEdgeStmt, err = db.PrepareContext(ctx, updateGraphEdge); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGraphEdge: %w", err)
	}
	if q.updateGraphEdgeAttrsStmt, err = db.PrepareContext(ctx, updateGraphEdgeAttrs); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGraphEdgeAttrs: %w", err)
	}
	if q.updateGraphEdgeProvenanceStmt, err = db.PrepareContext(ctx, updateGraphEdgeProvenance); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGraphEdgeProvenance: %w", err)
	}
	if q.updateGraphEntityStmt, err = db.PrepareContext(ctx, updateGraphEntity); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGraphEntity: %w", err)
	}
	if q.updateGraphEntityAttrsStmt, err = db.PrepareContext(ctx, updateGraphEntityAttrs); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGraphEntityAttrs: %w", err)
	}
	if q.updateObservationStmt, err = db.PrepareContext(ctx, updateObservation); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateObservation: %w", err)
	}
	if q.updateWorkspaceStmt, err = db.PrepareContext(ctx, updateWorkspace); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWorkspace: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.batchCreateEntityFileRelationsStmt != nil {
		if cerr := q.batchCreateEntityFileRelationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing batchCreateEntityFileRelationsStmt: %w", cerr)
		}
	}
	if q.batchCreateFilesStmt != nil {
		if cerr := q.batchCreateFilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing batchCreateFilesStmt: %w", cerr)
		}
	}
	if q.batchCreateObservationsStmt != nil {
		if cerr := q.batchCreateObservationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing batchCreateObservationsStmt: %w", cerr)
		}
	}
	if q.batchCreateOperationsStmt != nil {
		if cerr := q.batchCreateOperationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing batchCreateOperationsStmt: %w", cerr)
		}
	}
	if q.batchCreateWorkspacesStmt != nil {
		if cerr := q.batchCreateWorkspacesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing batchCreateWorkspacesStmt: %w", cerr)
		}
	}
	if q.batchDeleteFilesStmt != nil {
		if cerr := q.batchDeleteFilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing batchDeleteFilesStmt: %w", cerr)
		}
	}
	if q.batchDeleteObservationsStmt != nil {
		if cerr := q.batchDeleteObservationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing batchDeleteObservationsStmt: %w", cerr)
		}
	}
	if q.batchUpdateFilesStmt != nil {
		if cerr := q.batchUpdateFilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing batchUpdateFilesStmt: %w", cerr)
		}
	}
	if q.batchUpdateObservationsStmt != nil {
		if cerr := q.batchUpdateObservationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing batchUpdateObservationsStmt: %w", cerr)
		}
	}
	if q.batchUpdateRelationConfidenceStmt != nil {
		if cerr := q.batchUpdateRelationConfidenceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing batchUpdateRelationConfidenceStmt: %w", cerr)
		}
	}
	if q.batchUpdateWorkspaceConfigsStmt != nil {
		if cerr := q.batchUpdateWorkspaceConfigsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing batchUpdateWorkspaceConfigsStmt: %w", cerr)
		}
	}
	if q.bulkUpdateFileEmbeddingsStmt != nil {
		if cerr := q.bulkUpdateFileEmbeddingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing bulkUpdateFileEmbeddingsStmt: %w", cerr)
		}
	}
	if q.cleanupLowConfidenceRelationsStmt != nil {
		if cerr := q.cleanupLowConfidenceRelationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cleanupLowConfidenceRelationsStmt: %w", cerr)
		}
	}
	if q.cleanupOldOperationsStmt != nil {
		if cerr := q.cleanupOldOperationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cleanupOldOperationsStmt: %w", cerr)
		}
	}
	if q.countGraphEntitiesStmt != nil {
		if cerr := q.countGraphEntitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countGraphEntitiesStmt: %w", cerr)
		}
	}
	if q.countGraphEntitiesByKindStmt != nil {
		if cerr := q.countGraphEntitiesByKindStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countGraphEntitiesByKindStmt: %w", cerr)
		}
	}
	if q.countGraphGraphEdgesStmt != nil {
		if cerr := q.countGraphGraphEdgesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countGraphGraphEdgesStmt: %w", cerr)
		}
	}
	if q.countGraphGraphEdgesByRelationStmt != nil {
		if cerr := q.countGraphGraphEdgesByRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countGraphGraphEdgesByRelationStmt: %w", cerr)
		}
	}
	if q.countGraphGraphEdgesBySourceStmt != nil {
		if cerr := q.countGraphGraphEdgesBySourceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countGraphGraphEdgesBySourceStmt: %w", cerr)
		}
	}
	if q.countGraphGraphEdgesByTargetStmt != nil {
		if cerr := q.countGraphGraphEdgesByTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countGraphGraphEdgesByTargetStmt: %w", cerr)
		}
	}
	if q.createEntityFileRelationStmt != nil {
		if cerr := q.createEntityFileRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEntityFileRelationStmt: %w", cerr)
		}
	}
	if q.createFileStmt != nil {
		if cerr := q.createFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFileStmt: %w", cerr)
		}
	}
	if q.createGraphEntityStmt != nil {
		if cerr := q.createGraphEntityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGraphEntityStmt: %w", cerr)
		}
	}
	if q.createGraphGraphEdgeStmt != nil {
		if cerr := q.createGraphGraphEdgeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGraphGraphEdgeStmt: %w", cerr)
		}
	}
	if q.createObservationStmt != nil {
		if cerr := q.createObservationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createObservationStmt: %w", cerr)
		}
	}
	if q.createOperationStmt != nil {
		if cerr := q.createOperationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOperationStmt: %w", cerr)
		}
	}
	if q.createSnapshotStmt != nil {
		if cerr := q.createSnapshotStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSnapshotStmt: %w", cerr)
		}
	}
	if q.createWorkspaceStmt != nil {
		if cerr := q.createWorkspaceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWorkspaceStmt: %w", cerr)
		}
	}
	if q.deleteEntityFileRelationStmt != nil {
		if cerr := q.deleteEntityFileRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEntityFileRelationStmt: %w", cerr)
		}
	}
	if q.deleteEntityObservationsStmt != nil {
		if cerr := q.deleteEntityObservationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEntityObservationsStmt: %w", cerr)
		}
	}
	if q.deleteFileStmt != nil {
		if cerr := q.deleteFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFileStmt: %w", cerr)
		}
	}
	if q.deleteGraphEdgeStmt != nil {
		if cerr := q.deleteGraphEdgeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGraphEdgeStmt: %w", cerr)
		}
	}
	if q.deleteGraphEntityStmt != nil {
		if cerr := q.deleteGraphEntityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGraphEntityStmt: %w", cerr)
		}
	}
	if q.deleteObservationStmt != nil {
		if cerr := q.deleteObservationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteObservationStmt: %w", cerr)
		}
	}
	if q.deleteSnapshotStmt != nil {
		if cerr := q.deleteSnapshotStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSnapshotStmt: %w", cerr)
		}
	}
	if q.deleteWorkspaceStmt != nil {
		if cerr := q.deleteWorkspaceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWorkspaceStmt: %w", cerr)
		}
	}
	if q.getCurrentGraphGraphEdgesStmt != nil {
		if cerr := q.getCurrentGraphGraphEdgesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCurrentGraphGraphEdgesStmt: %w", cerr)
		}
	}
	if q.getEntitiesByMetadataStmt != nil {
		if cerr := q.getEntitiesByMetadataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntitiesByMetadataStmt: %w", cerr)
		}
	}
	if q.getEntitiesByObservationCountStmt != nil {
		if cerr := q.getEntitiesByObservationCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntitiesByObservationCountStmt: %w", cerr)
		}
	}
	if q.getEntitiesWithEmbeddingsStmt != nil {
		if cerr := q.getEntitiesWithEmbeddingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntitiesWithEmbeddingsStmt: %w", cerr)
		}
	}
	if q.getEntityFileNetworkStmt != nil {
		if cerr := q.getEntityFileNetworkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntityFileNetworkStmt: %w", cerr)
		}
	}
	if q.getEntityFileRelationStmt != nil {
		if cerr := q.getEntityFileRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntityFileRelationStmt: %w", cerr)
		}
	}
	if q.getEntityNeighborsStmt != nil {
		if cerr := q.getEntityNeighborsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntityNeighborsStmt: %w", cerr)
		}
	}
	if q.getEntityObservationStatsStmt != nil {
		if cerr := q.getEntityObservationStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntityObservationStatsStmt: %w", cerr)
		}
	}
	if q.getEntityObservationsStmt != nil {
		if cerr := q.getEntityObservationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntityObservationsStmt: %w", cerr)
		}
	}
	if q.getEntityRelationsStmt != nil {
		if cerr := q.getEntityRelationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntityRelationsStmt: %w", cerr)
		}
	}
	if q.getFileStmt != nil {
		if cerr := q.getFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileStmt: %w", cerr)
		}
	}
	if q.getFileByPathStmt != nil {
		if cerr := q.getFileByPathStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileByPathStmt: %w", cerr)
		}
	}
	if q.getFileRelationsStmt != nil {
		if cerr := q.getFileRelationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileRelationsStmt: %w", cerr)
		}
	}
	if q.getFileStatsByWorkspaceStmt != nil {
		if cerr := q.getFileStatsByWorkspaceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileStatsByWorkspaceStmt: %w", cerr)
		}
	}
	if q.getFilesBySizeRangeStmt != nil {
		if cerr := q.getFilesBySizeRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFilesBySizeRangeStmt: %w", cerr)
		}
	}
	if q.getFilesForEntityTypeStmt != nil {
		if cerr := q.getFilesForEntityTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFilesForEntityTypeStmt: %w", cerr)
		}
	}
	if q.getFilesWithEmbeddingsStmt != nil {
		if cerr := q.getFilesWithEmbeddingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFilesWithEmbeddingsStmt: %w", cerr)
		}
	}
	if q.getFilesWithoutEmbeddingsStmt != nil {
		if cerr := q.getFilesWithoutEmbeddingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFilesWithoutEmbeddingsStmt: %w", cerr)
		}
	}
	if q.getGraphEdgeAttrsStmt != nil {
		if cerr := q.getGraphEdgeAttrsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGraphEdgeAttrsStmt: %w", cerr)
		}
	}
	if q.getGraphEdgeProvenanceStmt != nil {
		if cerr := q.getGraphEdgeProvenanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGraphEdgeProvenanceStmt: %w", cerr)
		}
	}
	if q.getGraphEntitiesByKindStmt != nil {
		if cerr := q.getGraphEntitiesByKindStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGraphEntitiesByKindStmt: %w", cerr)
		}
	}
	if q.getGraphEntitiesWithSummaryStmt != nil {
		if cerr := q.getGraphEntitiesWithSummaryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGraphEntitiesWithSummaryStmt: %w", cerr)
		}
	}
	if q.getGraphEntityStmt != nil {
		if cerr := q.getGraphEntityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGraphEntityStmt: %w", cerr)
		}
	}
	if q.getGraphEntityAttrsStmt != nil {
		if cerr := q.getGraphEntityAttrsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGraphEntityAttrsStmt: %w", cerr)
		}
	}
	if q.getGraphGraphEdgeStmt != nil {
		if cerr := q.getGraphGraphEdgeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGraphGraphEdgeStmt: %w", cerr)
		}
	}
	if q.getGraphGraphEdgesAsOfStmt != nil {
		if cerr := q.getGraphGraphEdgesAsOfStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGraphGraphEdgesAsOfStmt: %w", cerr)
		}
	}
	if q.getGraphGraphEdgesBetweenEntitiesStmt != nil {
		if cerr := q.getGraphGraphEdgesBetweenEntitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGraphGraphEdgesBetweenEntitiesStmt: %w", cerr)
		}
	}
	if q.getGraphGraphEdgesByRelationStmt != nil {
		if cerr := q.getGraphGraphEdgesByRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGraphGraphEdgesByRelationStmt: %w", cerr)
		}
	}
	if q.getGraphGraphEdgesBySourceStmt != nil {
		if cerr := q.getGraphGraphEdgesBySourceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGraphGraphEdgesBySourceStmt: %w", cerr)
		}
	}
	if q.getGraphGraphEdgesByTargetStmt != nil {
		if cerr := q.getGraphGraphEdgesByTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGraphGraphEdgesByTargetStmt: %w", cerr)
		}
	}
	if q.getGraphGraphEdgesByTimeRangeStmt != nil {
		if cerr := q.getGraphGraphEdgesByTimeRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGraphGraphEdgesByTimeRangeStmt: %w", cerr)
		}
	}
	if q.getGraphGraphEdgesWithValidityStmt != nil {
		if cerr := q.getGraphGraphEdgesWithValidityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGraphGraphEdgesWithValidityStmt: %w", cerr)
		}
	}
	if q.getHighConfidenceRelationsStmt != nil {
		if cerr := q.getHighConfidenceRelationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHighConfidenceRelationsStmt: %w", cerr)
		}
	}
	if q.getInvalidatedGraphGraphEdgesStmt != nil {
		if cerr := q.getInvalidatedGraphGraphEdgesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInvalidatedGraphGraphEdgesStmt: %w", cerr)
		}
	}
	if q.getLatestSnapshotStmt != nil {
		if cerr := q.getLatestSnapshotStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLatestSnapshotStmt: %w", cerr)
		}
	}
	if q.getObservationStmt != nil {
		if cerr := q.getObservationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getObservationStmt: %w", cerr)
		}
	}
	if q.getObservationsByEntitiesStmt != nil {
		if cerr := q.getObservationsByEntitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getObservationsByEntitiesStmt: %w", cerr)
		}
	}
	if q.getObservationsByTimeRangeStmt != nil {
		if cerr := q.getObservationsByTimeRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getObservationsByTimeRangeStmt: %w", cerr)
		}
	}
	if q.getObservationsWithEmbeddingsStmt != nil {
		if cerr := q.getObservationsWithEmbeddingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getObservationsWithEmbeddingsStmt: %w", cerr)
		}
	}
	if q.getOperationStmt != nil {
		if cerr := q.getOperationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOperationStmt: %w", cerr)
		}
	}
	if q.getOperationStatsStmt != nil {
		if cerr := q.getOperationStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOperationStatsStmt: %w", cerr)
		}
	}
	if q.getOperationSummaryStmt != nil {
		if cerr := q.getOperationSummaryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOperationSummaryStmt: %w", cerr)
		}
	}
	if q.getOperationsByTimeRangeStmt != nil {
		if cerr := q.getOperationsByTimeRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOperationsByTimeRangeStmt: %w", cerr)
		}
	}
	if q.getOperationsByTypeStmt != nil {
		if cerr := q.getOperationsByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOperationsByTypeStmt: %w", cerr)
		}
	}
	if q.getOperationsByUserStmt != nil {
		if cerr := q.getOperationsByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOperationsByUserStmt: %w", cerr)
		}
	}
	if q.getOrphanedRelationsStmt != nil {
		if cerr := q.getOrphanedRelationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrphanedRelationsStmt: %w", cerr)
		}
	}
	if q.getRecentEntitiesStmt != nil {
		if cerr := q.getRecentEntitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecentEntitiesStmt: %w", cerr)
		}
	}
	if q.getRecentObservationsStmt != nil {
		if cerr := q.getRecentObservationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecentObservationsStmt: %w", cerr)
		}
	}
	if q.getRecentOperationsStmt != nil {
		if cerr := q.getRecentOperationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecentOperationsStmt: %w", cerr)
		}
	}
	if q.getRecentlyModifiedFilesStmt != nil {
		if cerr := q.getRecentlyModifiedFilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecentlyModifiedFilesStmt: %w", cerr)
		}
	}
	if q.getRelationStatisticsStmt != nil {
		if cerr := q.getRelationStatisticsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRelationStatisticsStmt: %w", cerr)
		}
	}
	if q.getRelationsByTypeStmt != nil {
		if cerr := q.getRelationsByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRelationsByTypeStmt: %w", cerr)
		}
	}
	if q.getSimilarEntitiesForFileStmt != nil {
		if cerr := q.getSimilarEntitiesForFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSimilarEntitiesForFileStmt: %w", cerr)
		}
	}
	if q.getSnapshotStmt != nil {
		if cerr := q.getSnapshotStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSnapshotStmt: %w", cerr)
		}
	}
	if q.getTopRelatedFilesStmt != nil {
		if cerr := q.getTopRelatedFilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTopRelatedFilesStmt: %w", cerr)
		}
	}
	if q.getWorkspaceStmt != nil {
		if cerr := q.getWorkspaceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceStmt: %w", cerr)
		}
	}
	if q.getWorkspaceActivityStmt != nil {
		if cerr := q.getWorkspaceActivityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceActivityStmt: %w", cerr)
		}
	}
	if q.getWorkspaceByPathStmt != nil {
		if cerr := q.getWorkspaceByPathStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceByPathStmt: %w", cerr)
		}
	}
	if q.getWorkspaceFileDistributionStmt != nil {
		if cerr := q.getWorkspaceFileDistributionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceFileDistributionStmt: %w", cerr)
		}
	}
	if q.getWorkspaceOperationsStmt != nil {
		if cerr := q.getWorkspaceOperationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceOperationsStmt: %w", cerr)
		}
	}
	if q.getWorkspaceSnapshotsStmt != nil {
		if cerr := q.getWorkspaceSnapshotsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceSnapshotsStmt: %w", cerr)
		}
	}
	if q.getWorkspaceSummaryStmt != nil {
		if cerr := q.getWorkspaceSummaryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceSummaryStmt: %w", cerr)
		}
	}
	if q.getWorkspaceTopFilesStmt != nil {
		if cerr := q.getWorkspaceTopFilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceTopFilesStmt: %w", cerr)
		}
	}
	if q.getWorkspaceWithStatsStmt != nil {
		if cerr := q.getWorkspaceWithStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceWithStatsStmt: %w", cerr)
		}
	}
	if q.getWorkspacesByActivityStmt != nil {
		if cerr := q.getWorkspacesByActivityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspacesByActivityStmt: %w", cerr)
		}
	}
	if q.invalidateGraphEdgeStmt != nil {
		if cerr := q.invalidateGraphEdgeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing invalidateGraphEdgeStmt: %w", cerr)
		}
	}
	if q.listFilesByDirectoryStmt != nil {
		if cerr := q.listFilesByDirectoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFilesByDirectoryStmt: %w", cerr)
		}
	}
	if q.listFilesByWorkspaceStmt != nil {
		if cerr := q.listFilesByWorkspaceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFilesByWorkspaceStmt: %w", cerr)
		}
	}
	if q.listGraphEntitiesStmt != nil {
		if cerr := q.listGraphEntitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGraphEntitiesStmt: %w", cerr)
		}
	}
	if q.listGraphGraphGraphEdgesStmt != nil {
		if cerr := q.listGraphGraphGraphEdgesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGraphGraphGraphEdgesStmt: %w", cerr)
		}
	}
	if q.listWorkspacesStmt != nil {
		if cerr := q.listWorkspacesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listWorkspacesStmt: %w", cerr)
		}
	}
	if q.searchEntitiesByContentStmt != nil {
		if cerr := q.searchEntitiesByContentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchEntitiesByContentStmt: %w", cerr)
		}
	}
	if q.searchEntitiesByNameStmt != nil {
		if cerr := q.searchEntitiesByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchEntitiesByNameStmt: %w", cerr)
		}
	}
	if q.searchEntitiesByTypeStmt != nil {
		if cerr := q.searchEntitiesByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchEntitiesByTypeStmt: %w", cerr)
		}
	}
	if q.searchFilesStmt != nil {
		if cerr := q.searchFilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchFilesStmt: %w", cerr)
		}
	}
	if q.searchGraphEntitiesFTSStmt != nil {
		if cerr := q.searchGraphEntitiesFTSStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchGraphEntitiesFTSStmt: %w", cerr)
		}
	}
	if q.searchObservationsStmt != nil {
		if cerr := q.searchObservationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchObservationsStmt: %w", cerr)
		}
	}
	if q.searchWorkspacesStmt != nil {
		if cerr := q.searchWorkspacesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchWorkspacesStmt: %w", cerr)
		}
	}
	if q.updateEntityFileRelationStmt != nil {
		if cerr := q.updateEntityFileRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEntityFileRelationStmt: %w", cerr)
		}
	}
	if q.updateFileStmt != nil {
		if cerr := q.updateFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFileStmt: %w", cerr)
		}
	}
	if q.updateGraphEdgeStmt != nil {
		if cerr := q.updateGraphEdgeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGraphEdgeStmt: %w", cerr)
		}
	}
	if q.updateGraphEdgeAttrsStmt != nil {
		if cerr := q.updateGraphEdgeAttrsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGraphEdgeAttrsStmt: %w", cerr)
		}
	}
	if q.updateGraphEdgeProvenanceStmt != nil {
		if cerr := q.updateGraphEdgeProvenanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGraphEdgeProvenanceStmt: %w", cerr)
		}
	}
	if q.updateGraphEntityStmt != nil {
		if cerr := q.updateGraphEntityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGraphEntityStmt: %w", cerr)
		}
	}
	if q.updateGraphEntityAttrsStmt != nil {
		if cerr := q.updateGraphEntityAttrsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGraphEntityAttrsStmt: %w", cerr)
		}
	}
	if q.updateObservationStmt != nil {
		if cerr := q.updateObservationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateObservationStmt: %w", cerr)
		}
	}
	if q.updateWorkspaceStmt != nil {
		if cerr := q.updateWorkspaceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWorkspaceStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                    DBTX
	tx                                    *sql.Tx
	batchCreateEntityFileRelationsStmt    *sql.Stmt
	batchCreateFilesStmt                  *sql.Stmt
	batchCreateObservationsStmt           *sql.Stmt
	batchCreateOperationsStmt             *sql.Stmt
	batchCreateWorkspacesStmt             *sql.Stmt
	batchDeleteFilesStmt                  *sql.Stmt
	batchDeleteObservationsStmt           *sql.Stmt
	batchUpdateFilesStmt                  *sql.Stmt
	batchUpdateObservationsStmt           *sql.Stmt
	batchUpdateRelationConfidenceStmt     *sql.Stmt
	batchUpdateWorkspaceConfigsStmt       *sql.Stmt
	bulkUpdateFileEmbeddingsStmt          *sql.Stmt
	cleanupLowConfidenceRelationsStmt     *sql.Stmt
	cleanupOldOperationsStmt              *sql.Stmt
	countGraphEntitiesStmt                *sql.Stmt
	countGraphEntitiesByKindStmt          *sql.Stmt
	countGraphGraphEdgesStmt              *sql.Stmt
	countGraphGraphEdgesByRelationStmt    *sql.Stmt
	countGraphGraphEdgesBySourceStmt      *sql.Stmt
	countGraphGraphEdgesByTargetStmt      *sql.Stmt
	createEntityFileRelationStmt          *sql.Stmt
	createFileStmt                        *sql.Stmt
	createGraphEntityStmt                 *sql.Stmt
	createGraphGraphEdgeStmt              *sql.Stmt
	createObservationStmt                 *sql.Stmt
	createOperationStmt                   *sql.Stmt
	createSnapshotStmt                    *sql.Stmt
	createWorkspaceStmt                   *sql.Stmt
	deleteEntityFileRelationStmt          *sql.Stmt
	deleteEntityObservationsStmt          *sql.Stmt
	deleteFileStmt                        *sql.Stmt
	deleteGraphEdgeStmt                   *sql.Stmt
	deleteGraphEntityStmt                 *sql.Stmt
	deleteObservationStmt                 *sql.Stmt
	deleteSnapshotStmt                    *sql.Stmt
	deleteWorkspaceStmt                   *sql.Stmt
	getCurrentGraphGraphEdgesStmt         *sql.Stmt
	getEntitiesByMetadataStmt             *sql.Stmt
	getEntitiesByObservationCountStmt     *sql.Stmt
	getEntitiesWithEmbeddingsStmt         *sql.Stmt
	getEntityFileNetworkStmt              *sql.Stmt
	getEntityFileRelationStmt             *sql.Stmt
	getEntityNeighborsStmt                *sql.Stmt
	getEntityObservationStatsStmt         *sql.Stmt
	getEntityObservationsStmt             *sql.Stmt
	getEntityRelationsStmt                *sql.Stmt
	getFileStmt                           *sql.Stmt
	getFileByPathStmt                     *sql.Stmt
	getFileRelationsStmt                  *sql.Stmt
	getFileStatsByWorkspaceStmt           *sql.Stmt
	getFilesBySizeRangeStmt               *sql.Stmt
	getFilesForEntityTypeStmt             *sql.Stmt
	getFilesWithEmbeddingsStmt            *sql.Stmt
	getFilesWithoutEmbeddingsStmt         *sql.Stmt
	getGraphEdgeAttrsStmt                 *sql.Stmt
	getGraphEdgeProvenanceStmt            *sql.Stmt
	getGraphEntitiesByKindStmt            *sql.Stmt
	getGraphEntitiesWithSummaryStmt       *sql.Stmt
	getGraphEntityStmt                    *sql.Stmt
	getGraphEntityAttrsStmt               *sql.Stmt
	getGraphGraphEdgeStmt                 *sql.Stmt
	getGraphGraphEdgesAsOfStmt            *sql.Stmt
	getGraphGraphEdgesBetweenEntitiesStmt *sql.Stmt
	getGraphGraphEdgesByRelationStmt      *sql.Stmt
	getGraphGraphEdgesBySourceStmt        *sql.Stmt
	getGraphGraphEdgesByTargetStmt        *sql.Stmt
	getGraphGraphEdgesByTimeRangeStmt     *sql.Stmt
	getGraphGraphEdgesWithValidityStmt    *sql.Stmt
	getHighConfidenceRelationsStmt        *sql.Stmt
	getInvalidatedGraphGraphEdgesStmt     *sql.Stmt
	getLatestSnapshotStmt                 *sql.Stmt
	getObservationStmt                    *sql.Stmt
	getObservationsByEntitiesStmt         *sql.Stmt
	getObservationsByTimeRangeStmt        *sql.Stmt
	getObservationsWithEmbeddingsStmt     *sql.Stmt
	getOperationStmt                      *sql.Stmt
	getOperationStatsStmt                 *sql.Stmt
	getOperationSummaryStmt               *sql.Stmt
	getOperationsByTimeRangeStmt          *sql.Stmt
	getOperationsByTypeStmt               *sql.Stmt
	getOperationsByUserStmt               *sql.Stmt
	getOrphanedRelationsStmt              *sql.Stmt
	getRecentEntitiesStmt                 *sql.Stmt
	getRecentObservationsStmt             *sql.Stmt
	getRecentOperationsStmt               *sql.Stmt
	getRecentlyModifiedFilesStmt          *sql.Stmt
	getRelationStatisticsStmt             *sql.Stmt
	getRelationsByTypeStmt                *sql.Stmt
	getSimilarEntitiesForFileStmt         *sql.Stmt
	getSnapshotStmt                       *sql.Stmt
	getTopRelatedFilesStmt                *sql.Stmt
	getWorkspaceStmt                      *sql.Stmt
	getWorkspaceActivityStmt              *sql.Stmt
	getWorkspaceByPathStmt                *sql.Stmt
	getWorkspaceFileDistributionStmt      *sql.Stmt
	getWorkspaceOperationsStmt            *sql.Stmt
	getWorkspaceSnapshotsStmt             *sql.Stmt
	getWorkspaceSummaryStmt               *sql.Stmt
	getWorkspaceTopFilesStmt              *sql.Stmt
	getWorkspaceWithStatsStmt             *sql.Stmt
	getWorkspacesByActivityStmt           *sql.Stmt
	invalidateGraphEdgeStmt               *sql.Stmt
	listFilesByDirectoryStmt              *sql.Stmt
	listFilesByWorkspaceStmt              *sql.Stmt
	listGraphEntitiesStmt                 *sql.Stmt
	listGraphGraphGraphEdgesStmt          *sql.Stmt
	listWorkspacesStmt                    *sql.Stmt
	searchEntitiesByContentStmt           *sql.Stmt
	searchEntitiesByNameStmt              *sql.Stmt
	searchEntitiesByTypeStmt              *sql.Stmt
	searchFilesStmt                       *sql.Stmt
	searchGraphEntitiesFTSStmt            *sql.Stmt
	searchObservationsStmt                *sql.Stmt
	searchWorkspacesStmt                  *sql.Stmt
	updateEntityFileRelationStmt          *sql.Stmt
	updateFileStmt                        *sql.Stmt
	updateGraphEdgeStmt                   *sql.Stmt
	updateGraphEdgeAttrsStmt              *sql.Stmt
	updateGraphEdgeProvenanceStmt         *sql.Stmt
	updateGraphEntityStmt                 *sql.Stmt
	updateGraphEntityAttrsStmt            *sql.Stmt
	updateObservationStmt                 *sql.Stmt
	updateWorkspaceStmt                   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                    tx,
		tx:                                    tx,
		batchCreateEntityFileRelationsStmt:    q.batchCreateEntityFileRelationsStmt,
		batchCreateFilesStmt:                  q.batchCreateFilesStmt,
		batchCreateObservationsStmt:           q.batchCreateObservationsStmt,
		batchCreateOperationsStmt:             q.batchCreateOperationsStmt,
		batchCreateWorkspacesStmt:             q.batchCreateWorkspacesStmt,
		batchDeleteFilesStmt:                  q.batchDeleteFilesStmt,
		batchDeleteObservationsStmt:           q.batchDeleteObservationsStmt,
		batchUpdateFilesStmt:                  q.batchUpdateFilesStmt,
		batchUpdateObservationsStmt:           q.batchUpdateObservationsStmt,
		batchUpdateRelationConfidenceStmt:     q.batchUpdateRelationConfidenceStmt,
		batchUpdateWorkspaceConfigsStmt:       q.batchUpdateWorkspaceConfigsStmt,
		bulkUpdateFileEmbeddingsStmt:          q.bulkUpdateFileEmbeddingsStmt,
		cleanupLowConfidenceRelationsStmt:     q.cleanupLowConfidenceRelationsStmt,
		cleanupOldOperationsStmt:              q.cleanupOldOperationsStmt,
		countGraphEntitiesStmt:                q.countGraphEntitiesStmt,
		countGraphEntitiesByKindStmt:          q.countGraphEntitiesByKindStmt,
		countGraphGraphEdgesStmt:              q.countGraphGraphEdgesStmt,
		countGraphGraphEdgesByRelationStmt:    q.countGraphGraphEdgesByRelationStmt,
		countGraphGraphEdgesBySourceStmt:      q.countGraphGraphEdgesBySourceStmt,
		countGraphGraphEdgesByTargetStmt:      q.countGraphGraphEdgesByTargetStmt,
		createEntityFileRelationStmt:          q.createEntityFileRelationStmt,
		createFileStmt:                        q.createFileStmt,
		createGraphEntityStmt:                 q.createGraphEntityStmt,
		createGraphGraphEdgeStmt:              q.createGraphGraphEdgeStmt,
		createObservationStmt:                 q.createObservationStmt,
		createOperationStmt:                   q.createOperationStmt,
		createSnapshotStmt:                    q.createSnapshotStmt,
		createWorkspaceStmt:                   q.createWorkspaceStmt,
		deleteEntityFileRelationStmt:          q.deleteEntityFileRelationStmt,
		deleteEntityObservationsStmt:          q.deleteEntityObservationsStmt,
		deleteFileStmt:                        q.deleteFileStmt,
		deleteGraphEdgeStmt:                   q.deleteGraphEdgeStmt,
		deleteGraphEntityStmt:                 q.deleteGraphEntityStmt,
		deleteObservationStmt:                 q.deleteObservationStmt,
		deleteSnapshotStmt:                    q.deleteSnapshotStmt,
		deleteWorkspaceStmt:                   q.deleteWorkspaceStmt,
		getCurrentGraphGraphEdgesStmt:         q.getCurrentGraphGraphEdgesStmt,
		getEntitiesByMetadataStmt:             q.getEntitiesByMetadataStmt,
		getEntitiesByObservationCountStmt:     q.getEntitiesByObservationCountStmt,
		getEntitiesWithEmbeddingsStmt:         q.getEntitiesWithEmbeddingsStmt,
		getEntityFileNetworkStmt:              q.getEntityFileNetworkStmt,
		getEntityFileRelationStmt:             q.getEntityFileRelationStmt,
		getEntityNeighborsStmt:                q.getEntityNeighborsStmt,
		getEntityObservationStatsStmt:         q.getEntityObservationStatsStmt,
		getEntityObservationsStmt:             q.getEntityObservationsStmt,
		getEntityRelationsStmt:                q.getEntityRelationsStmt,
		getFileStmt:                           q.getFileStmt,
		getFileByPathStmt:                     q.getFileByPathStmt,
		getFileRelationsStmt:                  q.getFileRelationsStmt,
		getFileStatsByWorkspaceStmt:           q.getFileStatsByWorkspaceStmt,
		getFilesBySizeRangeStmt:               q.getFilesBySizeRangeStmt,
		getFilesForEntityTypeStmt:             q.getFilesForEntityTypeStmt,
		getFilesWithEmbeddingsStmt:            q.getFilesWithEmbeddingsStmt,
		getFilesWithoutEmbeddingsStmt:         q.getFilesWithoutEmbeddingsStmt,
		getGraphEdgeAttrsStmt:                 q.getGraphEdgeAttrsStmt,
		getGraphEdgeProvenanceStmt:            q.getGraphEdgeProvenanceStmt,
		getGraphEntitiesByKindStmt:            q.getGraphEntitiesByKindStmt,
		getGraphEntitiesWithSummaryStmt:       q.getGraphEntitiesWithSummaryStmt,
		getGraphEntityStmt:                    q.getGraphEntityStmt,
		getGraphEntityAttrsStmt:               q.getGraphEntityAttrsStmt,
		getGraphGraphEdgeStmt:                 q.getGraphGraphEdgeStmt,
		getGraphGraphEdgesAsOfStmt:            q.getGraphGraphEdgesAsOfStmt,
		getGraphGraphEdgesBetweenEntitiesStmt: q.getGraphGraphEdgesBetweenEntitiesStmt,
		getGraphGraphEdgesByRelationStmt:      q.getGraphGraphEdgesByRelationStmt,
		getGraphGraphEdgesBySourceStmt:        q.getGraphGraphEdgesBySourceStmt,
		getGraphGraphEdgesByTargetStmt:        q.getGraphGraphEdgesByTargetStmt,
		getGraphGraphEdgesByTimeRangeStmt:     q.getGraphGraphEdgesByTimeRangeStmt,
		getGraphGraphEdgesWithValidityStmt:    q.getGraphGraphEdgesWithValidityStmt,
		getHighConfidenceRelationsStmt:        q.getHighConfidenceRelationsStmt,
		getInvalidatedGraphGraphEdgesStmt:     q.getInvalidatedGraphGraphEdgesStmt,
		getLatestSnapshotStmt:                 q.getLatestSnapshotStmt,
		getObservationStmt:                    q.getObservationStmt,
		getObservationsByEntitiesStmt:         q.getObservationsByEntitiesStmt,
		getObservationsByTimeRangeStmt:        q.getObservationsByTimeRangeStmt,
		getObservationsWithEmbeddingsStmt:     q.getObservationsWithEmbeddingsStmt,
		getOperationStmt:                      q.getOperationStmt,
		getOperationStatsStmt:                 q.getOperationStatsStmt,
		getOperationSummaryStmt:               q.getOperationSummaryStmt,
		getOperationsByTimeRangeStmt:          q.getOperationsByTimeRangeStmt,
		getOperationsByTypeStmt:               q.getOperationsByTypeStmt,
		getOperationsByUserStmt:               q.getOperationsByUserStmt,
		getOrphanedRelationsStmt:              q.getOrphanedRelationsStmt,
		getRecentEntitiesStmt:                 q.getRecentEntitiesStmt,
		getRecentObservationsStmt:             q.getRecentObservationsStmt,
		getRecentOperationsStmt:               q.getRecentOperationsStmt,
		getRecentlyModifiedFilesStmt:          q.getRecentlyModifiedFilesStmt,
		getRelationStatisticsStmt:             q.getRelationStatisticsStmt,
		getRelationsByTypeStmt:                q.getRelationsByTypeStmt,
		getSimilarEntitiesForFileStmt:         q.getSimilarEntitiesForFileStmt,
		getSnapshotStmt:                       q.getSnapshotStmt,
		getTopRelatedFilesStmt:                q.getTopRelatedFilesStmt,
		getWorkspaceStmt:                      q.getWorkspaceStmt,
		getWorkspaceActivityStmt:              q.getWorkspaceActivityStmt,
		getWorkspaceByPathStmt:                q.getWorkspaceByPathStmt,
		getWorkspaceFileDistributionStmt:      q.getWorkspaceFileDistributionStmt,
		getWorkspaceOperationsStmt:            q.getWorkspaceOperationsStmt,
		getWorkspaceSnapshotsStmt:             q.getWorkspaceSnapshotsStmt,
		getWorkspaceSummaryStmt:               q.getWorkspaceSummaryStmt,
		getWorkspaceTopFilesStmt:              q.getWorkspaceTopFilesStmt,
		getWorkspaceWithStatsStmt:             q.getWorkspaceWithStatsStmt,
		getWorkspacesByActivityStmt:           q.getWorkspacesByActivityStmt,
		invalidateGraphEdgeStmt:               q.invalidateGraphEdgeStmt,
		listFilesByDirectoryStmt:              q.listFilesByDirectoryStmt,
		listFilesByWorkspaceStmt:              q.listFilesByWorkspaceStmt,
		listGraphEntitiesStmt:                 q.listGraphEntitiesStmt,
		listGraphGraphGraphEdgesStmt:          q.listGraphGraphGraphEdgesStmt,
		listWorkspacesStmt:                    q.listWorkspacesStmt,
		searchEntitiesByContentStmt:           q.searchEntitiesByContentStmt,
		searchEntitiesByNameStmt:              q.searchEntitiesByNameStmt,
		searchEntitiesByTypeStmt:              q.searchEntitiesByTypeStmt,
		searchFilesStmt:                       q.searchFilesStmt,
		searchGraphEntitiesFTSStmt:            q.searchGraphEntitiesFTSStmt,
		searchObservationsStmt:                q.searchObservationsStmt,
		searchWorkspacesStmt:                  q.searchWorkspacesStmt,
		updateEntityFileRelationStmt:          q.updateEntityFileRelationStmt,
		updateFileStmt:                        q.updateFileStmt,
		updateGraphEdgeStmt:                   q.updateGraphEdgeStmt,
		updateGraphEdgeAttrsStmt:              q.updateGraphEdgeAttrsStmt,
		updateGraphEdgeProvenanceStmt:         q.updateGraphEdgeProvenanceStmt,
		updateGraphEntityStmt:                 q.updateGraphEntityStmt,
		updateGraphEntityAttrsStmt:            q.updateGraphEntityAttrsStmt,
		updateObservationStmt:                 q.updateObservationStmt,
		updateWorkspaceStmt:                   q.updateWorkspaceStmt,
	}
}
