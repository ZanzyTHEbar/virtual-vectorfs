// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workspaces.sql

package database

import (
	"context"
	"database/sql"
)

const batchCreateWorkspaces = `-- name: BatchCreateWorkspaces :exec
INSERT INTO workspaces (id, root_path, config, created_at, updated_at)
VALUES (?, ?, ?, ?, ?)
`

type BatchCreateWorkspacesParams struct {
	ID        string `json:"id"`
	RootPath  string `json:"root_path"`
	Config    string `json:"config"`
	CreatedAt int64  `json:"created_at"`
	UpdatedAt int64  `json:"updated_at"`
}

// Batch create multiple workspaces
func (q *Queries) BatchCreateWorkspaces(ctx context.Context, arg BatchCreateWorkspacesParams) error {
	_, err := q.exec(ctx, q.batchCreateWorkspacesStmt, batchCreateWorkspaces,
		arg.ID,
		arg.RootPath,
		arg.Config,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const batchUpdateWorkspaceConfigs = `-- name: BatchUpdateWorkspaceConfigs :exec
UPDATE workspaces
SET config = ?,
    updated_at = ?
WHERE id = ?
`

type BatchUpdateWorkspaceConfigsParams struct {
	Config    string `json:"config"`
	UpdatedAt int64  `json:"updated_at"`
	ID        string `json:"id"`
}

// Batch update workspace configurations
func (q *Queries) BatchUpdateWorkspaceConfigs(ctx context.Context, arg BatchUpdateWorkspaceConfigsParams) error {
	_, err := q.exec(ctx, q.batchUpdateWorkspaceConfigsStmt, batchUpdateWorkspaceConfigs, arg.Config, arg.UpdatedAt, arg.ID)
	return err
}

const createWorkspace = `-- name: CreateWorkspace :one
INSERT INTO workspaces (id, root_path, config, created_at, updated_at)
VALUES (?, ?, ?, ?, ?)
RETURNING id,
    root_path,
    config,
    created_at,
    updated_at
`

type CreateWorkspaceParams struct {
	ID        string `json:"id"`
	RootPath  string `json:"root_path"`
	Config    string `json:"config"`
	CreatedAt int64  `json:"created_at"`
	UpdatedAt int64  `json:"updated_at"`
}

// Create a new workspace
func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) (Workspace, error) {
	row := q.queryRow(ctx, q.createWorkspaceStmt, createWorkspace,
		arg.ID,
		arg.RootPath,
		arg.Config,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.RootPath,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWorkspace = `-- name: DeleteWorkspace :exec
DELETE FROM workspaces
WHERE id = ?
`

// Delete workspace by ID
func (q *Queries) DeleteWorkspace(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteWorkspaceStmt, deleteWorkspace, id)
	return err
}

const getWorkspace = `-- name: GetWorkspace :one
SELECT id,
    root_path,
    config,
    created_at,
    updated_at
FROM workspaces
WHERE id = ?
`

// Get workspace by ID
func (q *Queries) GetWorkspace(ctx context.Context, id string) (Workspace, error) {
	row := q.queryRow(ctx, q.getWorkspaceStmt, getWorkspace, id)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.RootPath,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkspaceActivity = `-- name: GetWorkspaceActivity :many
WITH recent_operations AS (
    SELECT operation_type,
        entity_path,
        performed_by,
        performed_at,
        ROW_NUMBER() OVER (
            ORDER BY performed_at DESC
        ) as row_num
    FROM operation_history
    WHERE workspace_id = ?
    ORDER BY performed_at DESC
    LIMIT ?
)
SELECT operation_type, entity_path, performed_by, performed_at, row_num
FROM recent_operations
ORDER BY performed_at DESC
`

type GetWorkspaceActivityParams struct {
	WorkspaceID string `json:"workspace_id"`
	Limit       int64  `json:"limit"`
}

type GetWorkspaceActivityRow struct {
	OperationType string      `json:"operation_type"`
	EntityPath    string      `json:"entity_path"`
	PerformedBy   string      `json:"performed_by"`
	PerformedAt   int64       `json:"performed_at"`
	RowNum        interface{} `json:"row_num"`
}

// Get recent activity for a workspace using window functions
func (q *Queries) GetWorkspaceActivity(ctx context.Context, arg GetWorkspaceActivityParams) ([]GetWorkspaceActivityRow, error) {
	rows, err := q.query(ctx, q.getWorkspaceActivityStmt, getWorkspaceActivity, arg.WorkspaceID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetWorkspaceActivityRow{}
	for rows.Next() {
		var i GetWorkspaceActivityRow
		if err := rows.Scan(
			&i.OperationType,
			&i.EntityPath,
			&i.PerformedBy,
			&i.PerformedAt,
			&i.RowNum,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceByPath = `-- name: GetWorkspaceByPath :one
SELECT id,
    root_path,
    config,
    created_at,
    updated_at
FROM workspaces
WHERE root_path = ?
`

// Get workspace by root path
func (q *Queries) GetWorkspaceByPath(ctx context.Context, rootPath string) (Workspace, error) {
	row := q.queryRow(ctx, q.getWorkspaceByPathStmt, getWorkspaceByPath, rootPath)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.RootPath,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkspaceFileDistribution = `-- name: GetWorkspaceFileDistribution :one
SELECT COUNT(*) as total_files,
    SUM(
        CASE
            WHEN is_dir THEN 1
            ELSE 0
        END
    ) as directories,
    SUM(
        CASE
            WHEN NOT is_dir THEN 1
            ELSE 0
        END
    ) as regular_files,
    SUM(size) as total_size,
    AVG(size) as avg_file_size,
    MIN(size) as smallest_file,
    MAX(size) as largest_file,
    -- Size distribution
    COUNT(
        CASE
            WHEN size < 1024 THEN 1
        END
    ) as files_under_1kb,
    COUNT(
        CASE
            WHEN size BETWEEN 1024 AND 1048576 THEN 1
        END
    ) as files_1kb_to_1mb,
    COUNT(
        CASE
            WHEN size > 1048576 THEN 1
        END
    ) as files_over_1mb
FROM files
WHERE workspace_id = ?
`

type GetWorkspaceFileDistributionRow struct {
	TotalFiles    int64           `json:"total_files"`
	Directories   sql.NullFloat64 `json:"directories"`
	RegularFiles  sql.NullFloat64 `json:"regular_files"`
	TotalSize     sql.NullFloat64 `json:"total_size"`
	AvgFileSize   sql.NullFloat64 `json:"avg_file_size"`
	SmallestFile  interface{}     `json:"smallest_file"`
	LargestFile   interface{}     `json:"largest_file"`
	FilesUnder1kb int64           `json:"files_under_1kb"`
	Files1kbTo1mb int64           `json:"files_1kb_to_1mb"`
	FilesOver1mb  int64           `json:"files_over_1mb"`
}

// Get file type distribution and size statistics
func (q *Queries) GetWorkspaceFileDistribution(ctx context.Context, workspaceID string) (GetWorkspaceFileDistributionRow, error) {
	row := q.queryRow(ctx, q.getWorkspaceFileDistributionStmt, getWorkspaceFileDistribution, workspaceID)
	var i GetWorkspaceFileDistributionRow
	err := row.Scan(
		&i.TotalFiles,
		&i.Directories,
		&i.RegularFiles,
		&i.TotalSize,
		&i.AvgFileSize,
		&i.SmallestFile,
		&i.LargestFile,
		&i.FilesUnder1kb,
		&i.Files1kbTo1mb,
		&i.FilesOver1mb,
	)
	return i, err
}

const getWorkspaceSummary = `-- name: GetWorkspaceSummary :many
WITH workspace_stats AS (
    SELECT w.id,
        w.root_path,
        w.created_at,
        COUNT(f.id) as file_count,
        SUM(f.size) as total_size,
        COUNT(
            CASE
                WHEN f.embedding IS NOT NULL THEN 1
            END
        ) as embedded_files,
        MAX(f.mod_time) as latest_activity
    FROM workspaces w
        LEFT JOIN files f ON w.id = f.workspace_id
    GROUP BY w.id,
        w.root_path,
        w.created_at
)
SELECT id, root_path, created_at, file_count, total_size, embedded_files, latest_activity
FROM workspace_stats
ORDER BY latest_activity DESC NULLS LAST,
    created_at DESC
`

type GetWorkspaceSummaryRow struct {
	ID             string          `json:"id"`
	RootPath       string          `json:"root_path"`
	CreatedAt      int64           `json:"created_at"`
	FileCount      int64           `json:"file_count"`
	TotalSize      sql.NullFloat64 `json:"total_size"`
	EmbeddedFiles  int64           `json:"embedded_files"`
	LatestActivity interface{}     `json:"latest_activity"`
}

// Get summary of all workspaces with their statistics
func (q *Queries) GetWorkspaceSummary(ctx context.Context) ([]GetWorkspaceSummaryRow, error) {
	rows, err := q.query(ctx, q.getWorkspaceSummaryStmt, getWorkspaceSummary)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetWorkspaceSummaryRow{}
	for rows.Next() {
		var i GetWorkspaceSummaryRow
		if err := rows.Scan(
			&i.ID,
			&i.RootPath,
			&i.CreatedAt,
			&i.FileCount,
			&i.TotalSize,
			&i.EmbeddedFiles,
			&i.LatestActivity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceTopFiles = `-- name: GetWorkspaceTopFiles :many
SELECT id,
    file_path,
    size,
    mod_time,
    is_dir,
    created_at
FROM files
WHERE workspace_id = ?
    AND NOT is_dir
ORDER BY size DESC
LIMIT ?
`

type GetWorkspaceTopFilesParams struct {
	WorkspaceID string `json:"workspace_id"`
	Limit       int64  `json:"limit"`
}

type GetWorkspaceTopFilesRow struct {
	ID        string       `json:"id"`
	FilePath  string       `json:"file_path"`
	Size      int64        `json:"size"`
	ModTime   int64        `json:"mod_time"`
	IsDir     sql.NullBool `json:"is_dir"`
	CreatedAt int64        `json:"created_at"`
}

// Get largest files in workspace
func (q *Queries) GetWorkspaceTopFiles(ctx context.Context, arg GetWorkspaceTopFilesParams) ([]GetWorkspaceTopFilesRow, error) {
	rows, err := q.query(ctx, q.getWorkspaceTopFilesStmt, getWorkspaceTopFiles, arg.WorkspaceID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetWorkspaceTopFilesRow{}
	for rows.Next() {
		var i GetWorkspaceTopFilesRow
		if err := rows.Scan(
			&i.ID,
			&i.FilePath,
			&i.Size,
			&i.ModTime,
			&i.IsDir,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceWithStats = `-- name: GetWorkspaceWithStats :one
WITH file_stats AS (
    SELECT workspace_id,
        COUNT(*) as total_files,
        SUM(size) as total_size,
        COUNT(
            CASE
                WHEN is_dir THEN 1
            END
        ) as directory_count,
        COUNT(
            CASE
                WHEN NOT is_dir THEN 1
            END
        ) as file_count,
        COUNT(
            CASE
                WHEN embedding IS NOT NULL THEN 1
            END
        ) as files_with_embeddings,
        AVG(size) as avg_file_size,
        MAX(mod_time) as latest_modification,
        MIN(created_at) as oldest_file
    FROM files
    WHERE files.workspace_id = ?
    GROUP BY files.workspace_id
),
snapshot_stats AS (
    SELECT workspace_id,
        COUNT(*) as snapshot_count,
        MAX(taken_at) as latest_snapshot
    FROM snapshots
    WHERE snapshots.workspace_id = ?
    GROUP BY snapshots.workspace_id
),
history_stats AS (
    SELECT workspace_id,
        COUNT(*) as total_operations,
        MAX(performed_at) as latest_activity
    FROM operation_history
    WHERE operation_history.workspace_id = ?
    GROUP BY operation_history.workspace_id
)
SELECT w.id,
    w.root_path,
    w.config,
    w.created_at,
    w.updated_at,
    COALESCE(f.total_files, 0) as total_files,
    COALESCE(f.total_size, 0) as total_size,
    COALESCE(f.directory_count, 0) as directory_count,
    COALESCE(f.file_count, 0) as file_count,
    COALESCE(f.files_with_embeddings, 0) as files_with_embeddings,
    COALESCE(f.avg_file_size, 0) as avg_file_size,
    f.latest_modification,
    f.oldest_file,
    COALESCE(s.snapshot_count, 0) as snapshot_count,
    s.latest_snapshot,
    COALESCE(h.total_operations, 0) as total_operations,
    h.latest_activity
FROM workspaces w
    LEFT JOIN file_stats f ON w.id = f.workspace_id
    LEFT JOIN snapshot_stats s ON w.id = s.workspace_id
    LEFT JOIN history_stats h ON w.id = h.workspace_id
WHERE w.id = ?
`

type GetWorkspaceWithStatsParams struct {
	WorkspaceID   string `json:"workspace_id"`
	WorkspaceID_2 string `json:"workspace_id_2"`
	WorkspaceID_3 string `json:"workspace_id_3"`
	ID            string `json:"id"`
}

type GetWorkspaceWithStatsRow struct {
	ID                  string      `json:"id"`
	RootPath            string      `json:"root_path"`
	Config              string      `json:"config"`
	CreatedAt           int64       `json:"created_at"`
	UpdatedAt           int64       `json:"updated_at"`
	TotalFiles          int64       `json:"total_files"`
	TotalSize           float64     `json:"total_size"`
	DirectoryCount      int64       `json:"directory_count"`
	FileCount           int64       `json:"file_count"`
	FilesWithEmbeddings int64       `json:"files_with_embeddings"`
	AvgFileSize         float64     `json:"avg_file_size"`
	LatestModification  interface{} `json:"latest_modification"`
	OldestFile          interface{} `json:"oldest_file"`
	SnapshotCount       int64       `json:"snapshot_count"`
	LatestSnapshot      interface{} `json:"latest_snapshot"`
	TotalOperations     int64       `json:"total_operations"`
	LatestActivity      interface{} `json:"latest_activity"`
}

// Get workspace with comprehensive statistics using CTEs
func (q *Queries) GetWorkspaceWithStats(ctx context.Context, arg GetWorkspaceWithStatsParams) (GetWorkspaceWithStatsRow, error) {
	row := q.queryRow(ctx, q.getWorkspaceWithStatsStmt, getWorkspaceWithStats,
		arg.WorkspaceID,
		arg.WorkspaceID_2,
		arg.WorkspaceID_3,
		arg.ID,
	)
	var i GetWorkspaceWithStatsRow
	err := row.Scan(
		&i.ID,
		&i.RootPath,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TotalFiles,
		&i.TotalSize,
		&i.DirectoryCount,
		&i.FileCount,
		&i.FilesWithEmbeddings,
		&i.AvgFileSize,
		&i.LatestModification,
		&i.OldestFile,
		&i.SnapshotCount,
		&i.LatestSnapshot,
		&i.TotalOperations,
		&i.LatestActivity,
	)
	return i, err
}

const getWorkspacesByActivity = `-- name: GetWorkspacesByActivity :many
SELECT DISTINCT w.id,
    w.root_path,
    w.config,
    w.created_at,
    w.updated_at,
    MAX(
        COALESCE(f.mod_time, o.performed_at, w.updated_at)
    ) as latest_activity
FROM workspaces w
    LEFT JOIN files f ON w.id = f.workspace_id
    LEFT JOIN operation_history o ON w.id = o.workspace_id
GROUP BY w.id,
    w.root_path,
    w.config,
    w.created_at,
    w.updated_at
ORDER BY latest_activity DESC
LIMIT ? OFFSET ?
`

type GetWorkspacesByActivityParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

type GetWorkspacesByActivityRow struct {
	ID             string      `json:"id"`
	RootPath       string      `json:"root_path"`
	Config         string      `json:"config"`
	CreatedAt      int64       `json:"created_at"`
	UpdatedAt      int64       `json:"updated_at"`
	LatestActivity interface{} `json:"latest_activity"`
}

// Get workspaces ordered by recent activity
func (q *Queries) GetWorkspacesByActivity(ctx context.Context, arg GetWorkspacesByActivityParams) ([]GetWorkspacesByActivityRow, error) {
	rows, err := q.query(ctx, q.getWorkspacesByActivityStmt, getWorkspacesByActivity, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetWorkspacesByActivityRow{}
	for rows.Next() {
		var i GetWorkspacesByActivityRow
		if err := rows.Scan(
			&i.ID,
			&i.RootPath,
			&i.Config,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LatestActivity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkspaces = `-- name: ListWorkspaces :many
SELECT id,
    root_path,
    config,
    created_at,
    updated_at
FROM workspaces
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListWorkspacesParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

// List all workspaces with pagination
func (q *Queries) ListWorkspaces(ctx context.Context, arg ListWorkspacesParams) ([]Workspace, error) {
	rows, err := q.query(ctx, q.listWorkspacesStmt, listWorkspaces, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Workspace{}
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.RootPath,
			&i.Config,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchWorkspaces = `-- name: SearchWorkspaces :many
SELECT id,
    root_path,
    config,
    created_at,
    updated_at
FROM workspaces
WHERE root_path LIKE '%' || ? || '%'
ORDER BY root_path
LIMIT ? OFFSET ?
`

type SearchWorkspacesParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int64          `json:"limit"`
	Offset  int64          `json:"offset"`
}

// Search workspaces by root path
func (q *Queries) SearchWorkspaces(ctx context.Context, arg SearchWorkspacesParams) ([]Workspace, error) {
	rows, err := q.query(ctx, q.searchWorkspacesStmt, searchWorkspaces, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Workspace{}
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.RootPath,
			&i.Config,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkspace = `-- name: UpdateWorkspace :one
UPDATE workspaces
SET config = ?,
    updated_at = ?
WHERE id = ?
RETURNING id,
    root_path,
    config,
    created_at,
    updated_at
`

type UpdateWorkspaceParams struct {
	Config    string `json:"config"`
	UpdatedAt int64  `json:"updated_at"`
	ID        string `json:"id"`
}

// Update workspace configuration
func (q *Queries) UpdateWorkspace(ctx context.Context, arg UpdateWorkspaceParams) (Workspace, error) {
	row := q.queryRow(ctx, q.updateWorkspaceStmt, updateWorkspace, arg.Config, arg.UpdatedAt, arg.ID)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.RootPath,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
